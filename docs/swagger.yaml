basePath: /api
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.Class:
    properties:
      course:
        $ref: '#/definitions/model.Course'
      courseID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      section:
        type: string
      updatedAt:
        type: string
    type: object
  model.Course:
    properties:
      courseCode:
        type: string
      courseName:
        type: string
      createdAt:
        type: string
      credit:
        type: number
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      detail:
        type: string
      id:
        type: integer
      semester:
        type: integer
      updatedAt:
        type: string
      year:
        type: integer
    type: object
  model.Faculty:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      department:
        type: string
      id:
        type: integer
      major:
        type: string
      updatedAt:
        type: string
    type: object
  model.Program:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      detail:
        type: string
      faculty:
        $ref: '#/definitions/model.Faculty'
      facultyID:
        type: integer
      id:
        type: integer
      prefix:
        type: string
      pricePerTerm:
        type: number
      programName:
        type: string
      updatedAt:
        type: string
    type: object
  model.Timetable:
    properties:
      class:
        $ref: '#/definitions/model.Class'
      classID:
        type: integer
      classType:
        type: string
      classroom:
        type: string
      createdAt:
        type: string
      day:
        $ref: '#/definitions/time.Weekday'
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      endTime:
        type: string
      id:
        type: integer
      startTime:
        type: string
      updatedAt:
        type: string
    type: object
  service.GetSectionByClassIDField:
    properties:
      courseCode:
        type: string
      section:
        type: string
    type: object
  service.GetTimetableByClassIDField:
    properties:
      classType:
        type: string
      classroom:
        type: string
      courseCode:
        type: string
      day:
        $ref: '#/definitions/time.Weekday'
      endTime:
        type: string
      section:
        type: string
      startTime:
        type: string
    type: object
  time.Weekday:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    type: integer
    x-enum-varnames:
    - Sunday
    - Monday
    - Tuesday
    - Wednesday
    - Thursday
    - Friday
    - Saturday
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /class:
    post:
      consumes:
      - application/json
      description: create a new class
      parameters:
      - description: Class object
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/model.Class'
      produces:
      - application/json
      responses:
        "200":
          description: Class created successfully
          schema:
            type: string
        "400":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: CreateClass
      tags:
      - Class
  /class/:id:
    get:
      consumes:
      - application/json
      description: get class search by id
      parameters:
      - description: class id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Class'
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: GetClassByID
      tags:
      - Class
  /class/course:
    get:
      consumes:
      - application/json
      description: get class search by course_id
      parameters:
      - description: course id
        in: query
        name: course_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Class'
            type: array
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: GetClassByCourseID
      tags:
      - Class
  /class/delete/:id:
    delete:
      consumes:
      - application/json
      description: delete class by class_id
      parameters:
      - description: class_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Class deleted successfully
          schema:
            type: string
        "404":
          description: were not able to delete the class
          schema:
            type: string
      summary: DeleteClassByID
      tags:
      - Class
  /class/semester:
    get:
      consumes:
      - application/json
      description: get class search by semester
      parameters:
      - description: 1, 2, ...
        in: query
        name: semester
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: array of class_id
          schema:
            items:
              type: integer
            type: array
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: GetClassBySemester
      tags:
      - Class
  /course:
    get:
      consumes:
      - application/json
      description: get all courses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Course'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      summary: GetAllCourses
      tags:
      - Course
    post:
      consumes:
      - application/json
      description: create a new course
      parameters:
      - description: Course object
        in: body
        name: program
        schema:
          $ref: '#/definitions/model.Course'
      produces:
      - application/json
      responses:
        "200":
          description: Course created successfully
          schema:
            type: string
        "400":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: CreateCourse
      tags:
      - Course
  /course/:id:
    get:
      consumes:
      - application/json
      description: get a course by id
      parameters:
      - description: program id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Course'
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: GetCourseByID
      tags:
      - Course
  /course/delete/:id:
    delete:
      consumes:
      - application/json
      description: delete a course by id
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Course deleted successfully
          schema:
            type: string
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: DeleteCourseByID
      tags:
      - Course
  /course/section:
    get:
      consumes:
      - application/json
      description: get section search by class_id
      parameters:
      - description: class id
        in: query
        name: class_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CourseCode, Section
          schema:
            items:
              $ref: '#/definitions/service.GetSectionByClassIDField'
            type: array
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: GetSectionByClassID
      tags:
      - Course
  /course/semester:
    get:
      consumes:
      - application/json
      description: get semester from all course [no duplicate]
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: GetAllDistinctSemester
      tags:
      - Course
  /course/update/:id:
    put:
      consumes:
      - application/json
      description: update a course by id
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Course updated successfully
          schema:
            type: string
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: UpdateCourseByID
      tags:
      - Course
  /program:
    get:
      consumes:
      - application/json
      description: get all programs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Program'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      summary: GetAllPrograms
      tags:
      - Program
    post:
      consumes:
      - application/json
      description: create a new program
      parameters:
      - description: Program object
        in: body
        name: program
        required: true
        schema:
          $ref: '#/definitions/model.Program'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: CreateProgram
      tags:
      - Program
  /program/:id:
    get:
      consumes:
      - application/json
      description: get a program by id
      parameters:
      - description: program id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Program'
        "404":
          description: Not Found
          schema:
            type: string
      summary: GetProgramByID
      tags:
      - Program
  /program/delete/:id:
    delete:
      consumes:
      - application/json
      description: delete a program by id
      parameters:
      - description: program id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: DeleteProgramByID
      tags:
      - Program
  /program/update/:id:
    put:
      consumes:
      - application/json
      description: update a program by id
      parameters:
      - description: program id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: UpdateProgramByID
      tags:
      - Program
  /timetable:
    post:
      consumes:
      - application/json
      description: create a new timetable
      parameters:
      - description: Timetable object
        in: body
        name: timetable
        required: true
        schema:
          $ref: '#/definitions/model.Timetable'
      produces:
      - application/json
      responses:
        "200":
          description: Timetable created successfully
          schema:
            type: string
        "400":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: CreateTimeTable
      tags:
      - Timetable
  /timetable/class:
    get:
      consumes:
      - application/json
      description: get timetable search by class_id
      parameters:
      - description: class id
        in: query
        name: class_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.GetTimetableByClassIDField'
            type: array
        "404":
          description: No timetables found
          schema:
            type: string
      summary: GetTimetableByClassID
      tags:
      - Timetable
  /timetable/count:
    get:
      consumes:
      - application/json
      description: get timetable search by class_id
      parameters:
      - description: you add your own search field in timetable model here (check
          equal only) but in php version it was searched by class_id
        in: query
        name: '{field_name}'
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of timetables
          schema:
            type: integer
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: CountTimeTable
      tags:
      - Timetable
  /timetable/delete/:id:
    delete:
      consumes:
      - application/json
      description: delete a timetable by id
      parameters:
      - description: timetable id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Timetable deleted successfully
          schema:
            type: string
        "404":
          description: some error message here (from err.Error())
          schema:
            type: string
      summary: DeleteTimeTableByID
      tags:
      - Timetable
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
